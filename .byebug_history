continue
p_arr = arr.map { |el| JSON.parse(el) } 
p_arr = arr.map do |el|
p_arr = JSON.parse(arr)
arr = user.active_word_list
arr = active_word_list
user.active_word_list
user.active_words_parsed
active_words_parsed
continue
active_words_parsed
old_words = user.active_word_list  
continue
Time.now.utc.to_date == self.word_list.created_at.to_date
Time.now.utc.to_date 
Time.now.utc.to_date.to_s
Time.now.utc.to_date
Date.now
Date.in_time_zone('UTC')
Date.today.in_time_zone('UTC')
self.word_list.created_at
self.word_list.created_at.to_date.to_s
Date.today.in_time_zone('UTC').to_date.to_s
self.word_list && self.word_list.created_at.to_date.to_s == Date.today.in_time_zone('UTC').to_date.to_s
Date.today.to_s
self.word_list.created_at.to_date.to_s == Date.today.to_s
self.word_list.created_at.to_date.to_s
self.word_list.created_at.to_date == Date.today
if self.word_list
self.word_list
self.word_list.created_at.to_date
self.word_list.created_at
self.word_list
self.word_list && self.word_list.created_at.to_date == Date.today
continue
exit
Date.today
Date.today.in_time_zone('UTC').to_date
self.word_list.created_at.to_date
self.word_list
self.word_list && self.word_list.created_at.to_date == Date.today.in_time_zone('UTC').to_date
continue
self.word_list
self
word_list
continue
exit
reload!
word_list
continue
word_list
word_list.created_at.to_date
Date.today.in_time_zone('UTC').to_date
continue
reload!
word_list
continue
Words.list.find { |word_hash| word_hash[:id] == word_id && word_hash[:s].include?(used_word) }
exit
Words.list.find { |word_hash| word_hash[:id] == word_id }
Words.list.find { |word_hash| word_hash[:id] == word_id && word_hash[:s].include?(used_word) }
Words.list.map { |d| d[:id] }
Words.list.map { |d| d[:s] }
Words.list.map { |d| d[:id] }
Words.list.length
Words.list.count
Words.list.map do |hash|
Words.list.map(&:s)
Words.list.class
Words.list.klass
Words.list.map(&:s)
used_word
word_id
Words.list.find { |word_hash| word_hash[:id] == word_id && word_hash[:s].include?(used_word) }
Words.list
Words.list.find { |word_hash| word_hash[:id] == word_id && word_hash[:s].include?(used_word) }
exit
next
@decoded = JsonWebToken.decode(header)
    header = request.headers['Authorization']
    header = header.split(' ').last if header
request.headers['Authorization']
exit
end
request.headers['Authorization']
exit
