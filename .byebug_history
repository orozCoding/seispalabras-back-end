continue
Words.list.find { |word_hash| word_hash[:id] == word_id && word_hash[:s].include?(used_word) }
exit
Words.list.find { |word_hash| word_hash[:id] == word_id }
Words.list.find { |word_hash| word_hash[:id] == word_id && word_hash[:s].include?(used_word) }
Words.list.map { |d| d[:id] }
Words.list.map { |d| d[:s] }
Words.list.map { |d| d[:id] }
Words.list.length
Words.list.count
Words.list.map do |hash|
Words.list.map(&:s)
Words.list.class
Words.list.klass
Words.list.map(&:s)
used_word
word_id
Words.list.find { |word_hash| word_hash[:id] == word_id && word_hash[:s].include?(used_word) }
Words.list
Words.list.find { |word_hash| word_hash[:id] == word_id && word_hash[:s].include?(used_word) }
exit
next
@decoded = JsonWebToken.decode(header)
    header = request.headers['Authorization']
    header = header.split(' ').last if header
request.headers['Authorization']
exit
end
request.headers['Authorization']
exit
